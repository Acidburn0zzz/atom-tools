= Installation

Move the atom directory to somewhere in your $RUBYLIB.

= Basic Usage
  require "atom/entry"

  entry = Atom::Entry.new

  entry.title = "Argh!"

  author = entry.authors.new
  author.name = "just this guy, you know?"

  file = entry.links.new
  file["rel"] = "enclosure"
  file["href"] = "http://example.com/file.ogg"

text content:

  entry.content = "foo"

XHTML content:
  (content["type"] defaults to text unless it's set after content *every time*):

  xml = REXML::Document.new(open("http://ruby-lang.org").read)
  entry.content = xml
  entry.content["type"] = "xhtml"

  entry.title = REXML::Document.new("<em>goodness</em> gracious")
  entry.title["type"] = "xhtml"

= To and From XML
    
    **WARNING**
I'm waiting on the APP WG to decide whether atom:entrys are always atom:entrys, so this isn't guaranteed to give you valid output. You can call valid? on an entry, but this isn't always helpful
    **WARNING**

to:
  
  entry.to_xml
  
returns a REXML::Document and

  entry.to_s

serializes that document.


from:
  require "atom/entry"

  entry = REXML::Document.new("entry.xml").to_atom_entry

= Extension Elements

  irt = REXML::Element.new("in-reply-to")
  irt.add_namespace "http://purl.org/syndication/thread/1.0"

  irt.attributes["ref"] = "tag:entries.com,2005:1"

  entry.extensions << irt

= YAML

For easy-authoring, atom-tools can now slurp an atom:entry from YAML:

  require "atom/yaml"

  yaml = << END
    title: Atom-Drunk Pirates Run Amok!
    tags: tag1 tag2
    authors:
    -
      name: Brendan Taylor
      email: whateley@gmail.com
    -
      name: Harvey
      uri: http://fake.com/

    content: |
      <p>blah blah blah blah</p>

      <p>and so on.</p>
  END

  entry = Atom::Entry.from_yaml(yaml)

= Feeds and Collections

  require "atom/feed"

  feed = Atom::Feed.new("http://example.org/feed.atom")
  feed.update!
  feed.entries
    => [ #<Atom::Entry:0xb7...> ]

Incremental feeds are supported (see mnot's feed-history draft).

  feed.get_everything!

  feed.entries
    => [ # the entries in the logical feed ]

= Getting down with the PP

  require "atom/collection"

  coll = Atom::Collection.new(coll_uri)

  entry = Atom::Entry.new
  coll.post! entry

  entry = coll.get_url(coll.entries.first.edit_url)

  entry.title = "an updated title"
  coll.put! entry
  coll.delete! entry

Special HTTP requirements (eg. authentication) can be met by passing an Atom::HTTP object when a feed or collection is initialized

  http = Atom::HTTP.new 
  http.user, http.pass = "username", "password"
  collection = Atom::Collection.new("http://example.org/feed.atom", http)

If the http object runs into a 401 Authorization Required http will respond with the given username and password
